public class TwitterPost_Utility {
    public static String retrieveAccessToken(String key, String secret){
        String API_Key=EncodingUtil.urlEncode(key,'UTF-8');
        String API_Secret_Key=EncodingUtil.urlEncode(secret,'UTF-8');      
        
        String Consumer_API_key=API_Key + ':' + API_Secret_Key;
        
        Blob httpRequestHeader=Blob.valueOf(Consumer_API_key);
        System.debug('Twitter HeaderBlob ' + httpRequestHeader);        
        
        HttpRequest req=new HttpRequest();
        req.setEndpoint('https://api.twitter.com/oauth2/token');
        req.setMethod('POST');        
        
        string basicAuthorizationHeader='Basic ' + EncodingUtil.base64Encode(httpRequestHeader);
        req.setHeader('Authorization',basicAuthorizationHeader);
        req.setBody('grant_type=client_credentials');        
        System.debug('Twitter Http request ' + req);        
        
        Http http=new Http();        
        HttpResponse res=http.send(req);
        String accessToken;        
        if(res.getStatusCode()==200)
        {
            JSONParser parser=JSON.createParser(res.getBody());
            System.debug('Twitter JSON response ' + parser);
            while(parser.nextToken()!=null)
            {
                if(parser.getCurrentToken()==JSONToken.FIELD_NAME && parser.getText() == 'access_token')
                {
                    parser.nextToken();
                    accessToken=parser.getText();
                }
            }
        }
        return accessToken;
    }
    //working fine
    public static String generateOathNonce()
    {
        //A collection of binary data stored as a single object.Blobs can be accepted as Web service arguments
        //Generates an Advanced Encryption Standard (AES). keysize=128,192,256
        Blob blobKey = crypto.generateAesKey(256);
        //convertToHex- Returns a hexadecimal (base 16) representation of the inputBlob.
        String key = EncodingUtil.convertToHex(blobKey);
        //base64Encode-Converts a Blob to an unencoded String representing its normal form.
        String oathNonce = EncodingUtil.base64Encode(Blob.valueOf(key));
        //(math.random() * 10)- generate random no between 1-10
        oathNonce = oathNonce.replaceAll('[^a-zA-Z0-9]+',''+integer.valueOf(math.random() * 10));
        //The substring begins at the specified beginIndex and extends to the character at index endIndex
        oathNonce = oathNonce.substring(0,42);
        return oathNonce;
    }
    //working fine
    //oauth_timestamp parameter indicates when the request was created. 
    public static long generateTimeStamp()
    {
        long timestamp = datetime.now().getTime(); 
        timestamp = timestamp / 1000;
        return timestamp;
    }
    
    //working fine
    @AuraEnabled
    public static Map<String,Object> twitterPost(String ApiKey,String ApiSecret, String AccessToken,String AccessTokenSecret,String message)
    {
        Map<String,Object> mp = null;
        if(String.isNotBlank(ApiKey) && String.isNotBlank(ApiSecret) && String.isNotBlank(AccessToken) && String.isNotBlank(AccessTokenSecret) && String.isNotBlank(message))
        {
            String oathNonce = TwitterPost_Utility.generateOathNonce();
            Long timestamp = TwitterPost_Utility.generateTimeStamp();
            //oauth_signature parameter contains a value which is generated by running all of the other request 
            //parameters and two secret values through a signing algorithm
            String signature = '';
            //Encodes a string into the application 
            message = Encodingutil.urlEncode(message, 'UTF-8');
            String othSecret = Encodingutil.urlEncode(Accesstokensecret, 'UTF-8');
            String consumSecret = Encodingutil.urlEncode(APIsecret, 'UTF-8');
            String othToken = Encodingutil.urlEncode(Accesstoken, 'UTF-8');
            String othNonce = Encodingutil.urlEncode(oathNonce, 'UTF-8');
            String consumKey = Encodingutil.urlEncode(APIkey, 'UTF-8');
            message = message.replaceAll('\\+','%20');
            String paramString = 'include_entities=true&'+
                'oauth_consumer_key='+consumKey+'&'+
                'oauth_nonce='+othNonce+'&'+
                'oauth_signature_method=HMAC-SHA1&'+
                'oauth_timestamp='+timestamp+'&'+
                'oauth_token='+othToken+'&'+
                'oauth_version=1.0&'+
                'status='+message;
            string baseString = 'POST&'+EncodingUtil.urlEncode('https://api.twitter.com/1.1/statuses/update.json', 'UTF-8')+'&'+ 
                EncodingUtil.urlEncode(paramString, 'UTF-8');
            string signString = consumSecret+'&'+othSecret;
            blob blobBaseString = Blob.ValueOf(baseString);
            blob blobSignString = Blob.ValueOf(signString);
            blob signBlob = crypto.generateMac('hmacSHA1',blobBaseString ,blobSignString );        
            signature =  EncodingUtil.base64Encode(signBlob);
            
            if(String.isNotBlank(signature))
            {
                signature = Encodingutil.urlEncode(signature, 'UTF-8');
                HttpRequest req = new HttpRequest();
                req.setEndpoint('https://api.twitter.com/1.1/statuses/update.json?include_entities=true');
                req.setMethod('POST');
                string reqstring = 'OAuth oauth_consumer_key="'+consumKey+'",'+
                    'oauth_nonce="'+othNonce+'",'+
                    'oauth_signature="'+signature +'",'+
                    'oauth_signature_method="HMAC-SHA1",'+
                    'oauth_timestamp="'+timestamp+'",'+
                    'oauth_token="'+othToken+'",'+
                    'oauth_version="1.0"';
                system.debug('### req String :'+reqstring);
                req.setHeader('Authorization',reqstring);
                req.setHeader('Content-Type','application/x-www-form-urlencoded');
                req.setBody('status='+message);
                Http http = new Http();
                HTTPResponse res = http.send(req);
                mp=(Map<String,Object>)JSON.deserializeUntyped(res.getBody());
                System.debug('mp---->'+mp);
            }
        }
        return mp;
    }
    
    //working fine
    @AuraEnabled
    public static List<String> login(){
        Twitter_Credentials__c mhc = Twitter_Credentials__c.getInstance(UserInfo.getUserId());
        String ApiKey=String.valueOf(mhc.get('Consumer_Key__c'));
        String ApiSecret=String.valueOf(mhc.get('Consumer_Secret__c'));
        String AccessToken=String.valueOf(mhc.get('Access_Token__c'));
        String AccessTokenSecret=String.valueOf(mhc.get('Access_Token_Secret__c'));
        List<String> cred = new List<String>();
        if(ApiKey!=null && ApiSecret!=null && AccessToken!=null && AccessTokenSecret!=null){
            cred.add(ApiKey);
            cred.add(ApiSecret);
            cred.add(AccessToken);
            cred.add(AccessTokenSecret);
        }
        else{
            cred.add('Invalid');
        }
        return cred;
    }
    
    //working fine
    @AuraEnabled
    public static void storeCredentials(String key,String secret,String token,String tokensecret){
        Twitter_Credentials__c mhc = Twitter_Credentials__c.getInstance(UserInfo.getUserId());
        mhc.put('Consumer_Key__c',key);
        mhc.put('Consumer_Secret__c',secret);
        mhc.put('Access_Token__c',token);
        mhc.put('Access_Token_Secret__c',tokensecret);
        UPSERT mhc;
    }
    //working fine
    @AuraEnabled
    public static List<Object> getTimeline(String Apikey,String ApiSecret, String AccessToken,String AccessTokenSecret){
        
        List<Object> result = null;
        String oathNonce = TwitterPost_Utility.generateOathNonce();
        Long timestamp = TwitterPost_Utility.generateTimeStamp();
        
        
        String signature = '';
        
        String othSecret = Encodingutil.urlEncode(Accesstokensecret, 'UTF-8');
        String consumSecret = Encodingutil.urlEncode(APIsecret, 'UTF-8');
        String othToken = Encodingutil.urlEncode(Accesstoken, 'UTF-8');
        String othNonce = Encodingutil.urlEncode(oathNonce, 'UTF-8');
        String consumKey = Encodingutil.urlEncode(APIkey, 'UTF-8');
        
        String paramString = 'include_entities=true&'+
            'oauth_consumer_key='+consumKey+'&'+
            'oauth_nonce='+othNonce+'&'+
            'oauth_signature_method=HMAC-SHA1&'+
            'oauth_timestamp='+timestamp+'&'+
            'oauth_token='+othToken+'&'+
            'oauth_version=1.0';
        
        string baseString = 'GET&'+EncodingUtil.urlEncode('https://api.twitter.com/1.1/statuses/home_timeline.json', 'UTF-8')+'&'+ 
            EncodingUtil.urlEncode(paramString, 'UTF-8');
        string signString = consumSecret+'&'+othSecret;
        blob blobBaseString = Blob.ValueOf(baseString);
        blob blobSignString = Blob.ValueOf(signString);
        blob signBlob = crypto.generateMac('hmacSHA1',blobBaseString ,blobSignString );        
        signature =  EncodingUtil.base64Encode(signBlob);
        
        System.debug(signature);
        if(String.isNotBlank(signature))
        {
            signature = Encodingutil.urlEncode(signature, 'UTF-8');
            HttpRequest req = new HttpRequest();
            req.setEndpoint('https://api.twitter.com/1.1/statuses/home_timeline.json?include_entities=true');
            req.setMethod('GET');
            string reqstring = 'OAuth oauth_consumer_key="'+consumKey+'",'+
                'oauth_nonce="'+othNonce+'",'+
                'oauth_signature="'+signature +'",'+
                'oauth_signature_method="HMAC-SHA1",'+
                'oauth_timestamp="'+timestamp+'",'+
                'oauth_token="'+othToken+'",'+
                'oauth_version="1.0"';
            system.debug('### req String :'+reqstring);
            req.setHeader('Authorization',reqstring);
            req.setHeader('Content-Type','application/x-www-form-urlencoded');
            Http http = new Http();
            try{
                HTTPResponse res = http.send(req);
                System.debug(res.getBody());
                result=(List<Object>)JSON.deserializeUntyped(res.getBody());
            }
            catch(Exception e){
                result = new List<Object>();
                result.add('Error');
            }
            
        }
        return result;
    }
    @AuraEnabled
    public static Map<String,Object> likePost(String tweetId,String userId,String APIkey,String APIsecret,String Accesstoken,String Accesstokensecret){
        Map<String,Object> result = null;
        String oathNonce = TwitterPost_Utility.generateOathNonce();
        Long timestamp = TwitterPost_Utility.generateTimeStamp();
        
        String signature = '';
        
        userId=Encodingutil.urlEncode(userId,'UTF-8');
        String othSecret = Encodingutil.urlEncode(Accesstokensecret, 'UTF-8');
        String consumSecret = Encodingutil.urlEncode(APIsecret, 'UTF-8');
        String othToken = Encodingutil.urlEncode(Accesstoken, 'UTF-8');
        String othNonce = Encodingutil.urlEncode(oathNonce, 'UTF-8');
        String consumKey = Encodingutil.urlEncode(APIkey, 'UTF-8');
        String paramString = 'include_entities=true&'+
            'oauth_consumer_key='+consumKey+'&'+
            'oauth_nonce='+othNonce+'&'+
            'oauth_signature_method=HMAC-SHA1&'+
            'oauth_timestamp='+timestamp+'&'+
            'oauth_token='+othToken+'&'+
            'oauth_version=1.0';
        
        string baseString = 'POST&'+EncodingUtil.urlEncode('https://api.twitter.com/2/users/'+userId+'/likes', 'UTF-8')+'&'+ 
            EncodingUtil.urlEncode(paramString, 'UTF-8');
        string signString = consumSecret+'&'+othSecret;
        blob blobBaseString = Blob.ValueOf(baseString);
        blob blobSignString = Blob.ValueOf(signString);
        blob signBlob = crypto.generateMac('hmacSHA1',blobBaseString ,blobSignString );        
        signature =  EncodingUtil.base64Encode(signBlob);
        
        System.debug(signature);
        if(String.isNotBlank(signature))
        {
            signature = Encodingutil.urlEncode(signature, 'UTF-8');
            HttpRequest req = new HttpRequest();
            req.setEndpoint('https://api.twitter.com/2/users/'+userId+'/likes');
            req.setMethod('POST');
            string reqstring = 'OAuth oauth_consumer_key="'+consumKey+'",'+
                'oauth_nonce="'+othNonce+'",'+
                'oauth_signature="'+signature+'",'+
                'oauth_signature_method="HMAC-SHA1",'+
                'oauth_timestamp="'+timestamp+'",'+
                'oauth_token="'+othToken+'",'+
                'oauth_version="1.0"';
            
            system.debug(' req String :'+'OAuth oauth_consumer_key="'+consumKey+'",oauth_token="'+othToken+'",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1625811259",oauth_nonce="faPobbgnPU9",oauth_version="1.0",oauth_signature="oXGbcTvp1EwUe1g6p50JI%2BCn4%2BE%3D"');
            req.setHeader('Authorization','OAuth oauth_consumer_key="'+consumKey+'",oauth_token="'+othToken+'",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1625811259",oauth_nonce="faPobbgnPU9",oauth_version="1.0",oauth_signature="oXGbcTvp1EwUe1g6p50JI%2BCn4%2BE%3D"');
            
            req.setHeader('Content-Type','application/json');
            
            JSONGenerator gen = JSON.createGenerator(true);
            gen.writeStartObject();
            gen.writeStringField('tweet_id',tweetId);
            
            System.debug(gen.getAsString());
            req.setBody(gen.getAsString());
            
            Http http = new Http();
            HTTPResponse res = http.send(req);
            System.debug(res.getBody());
            System.debug(res.getStatusCode());
            if(res.getStatusCode()==200){
                result = (Map<String,Object>)JSON.deserializeUntyped(res.getBody());
            }
        }
        return result;
    }
    @AuraEnabled
    public static Map<String,Object> getLikedTweets(String uId,String Apikey,String Apisecret){
        Map<String,Object> result = null;
        HttpRequest req=new HttpRequest();
        req.setEndpoint('https://api.twitter.com/2/users/'+uId+'/liked_tweets');
        req.setMethod('GET');
        String bearerAuthorizationHeader='Bearer '  + TwitterPost_Utility.retrieveAccessToken(Apikey,Apisecret);
        req.setHeader('Authorization',bearerAuthorizationHeader);
        
        Http http=new Http();
        System.debug('Twitter Request :- ' + req);
        HttpResponse res=http.send(req);
        if(res.getStatusCode()!=200)
        {
            System.debug('Twitter Response :- ' + res.getBody());
            return result;
        }
        String sBody=res.getBody();
        System.debug('Twitter sBody :- ' + sBody);
        result=(Map<String,Object>)JSON.deserializeUntyped(res.getBody());
        return result;
    }
}